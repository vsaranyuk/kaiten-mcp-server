<?xml version="1.0" encoding="UTF-8"?>
<!--
  Kaiten MCP Server Evaluation Template

  INSTRUCTIONS:
  1. Copy this file to custom-eval.xml
  2. Replace all [PLACEHOLDER] values with your actual Kaiten data
  3. Verify each question is answerable with your current data
  4. Run evaluations to test LLM effectiveness

  IMPORTANT: These questions use placeholder IDs and names.
  You MUST update them with real data from YOUR Kaiten instance.
-->

<evaluation>
  <!-- ========================================
       CATEGORY 1: SEARCH & DISCOVERY (30%)
       ======================================== -->

  <qa_pair>
    <question>
      Find all cards in space [YOUR_SPACE_ID] that are marked as ASAP,
      currently in state 2 (in progress), and have a due date before
      2025-12-31. How many such cards exist?

      If no such cards exist, answer "0".
    </question>
    <answer>[COUNT_OF_MATCHING_CARDS]</answer>
    <!--
      To find answer:
      1. kaiten_search_cards({space_id: X, asap: true, state: 2, due_date_before: "2025-12-31T23:59:59Z"})
      2. Count results
    -->
  </qa_pair>

  <qa_pair>
    <question>
      In board [YOUR_BOARD_ID], find all cards that contain the word
      "[YOUR_SEARCH_TERM]" in their title or description. What is the
      card_id of the card that was created first (oldest created date)?

      If no such cards exist, answer "NONE".
    </question>
    <answer>[OLDEST_CARD_ID]</answer>
    <!--
      To find answer:
      1. kaiten_search_cards({board_id: X, query: "term", sort_by: "created", sort_direction: "asc", limit: 1})
      2. Extract first card's ID
    -->
  </qa_pair>

  <qa_pair>
    <question>
      Find the user whose email is "[USER_EMAIL]@[DOMAIN].com" and then
      find all cards owned by this user in space [YOUR_SPACE_ID] that are
      currently blocked (blocked: true). How many blocked cards does this
      user own?

      If user not found or has no blocked cards, answer "0".
    </question>
    <answer>[COUNT_OF_BLOCKED_CARDS]</answer>
    <!--
      To find answer:
      1. kaiten_list_users({query: "USER_EMAIL"})
      2. Extract user_id
      3. kaiten_search_cards({space_id: X, owner_id: user_id, blocked: true})
      4. Count results
    -->
  </qa_pair>

  <!-- ========================================
       CATEGORY 2: DATA AGGREGATION (25%)
       ======================================== -->

  <qa_pair>
    <question>
      On board [YOUR_BOARD_ID], find the card with the most comments.
      What is the card_id of this card?

      Hint: Use kaiten_get_board_cards to get all cards, then compare
      comments_total field.
    </question>
    <answer>[CARD_ID_WITH_MOST_COMMENTS]</answer>
    <!--
      To find answer:
      1. kaiten_get_board_cards({board_id: X, limit: 20})
      2. Compare comments_total for each card
      3. Return card_id with highest comments_total
      4. May need multiple requests if board has >20 cards
    -->
  </qa_pair>

  <qa_pair>
    <question>
      Analyze board [YOUR_BOARD_ID]: get all card types using
      kaiten_list_types, then find which type_id has the most cards
      currently active (condition=1) on this board. What is the type_id?

      If board has no cards, answer "NONE".
    </question>
    <answer>[MOST_COMMON_TYPE_ID]</answer>
    <!--
      To find answer:
      1. kaiten_list_types({board_id: X})
      2. For each type: kaiten_search_cards({board_id: X, type_id: type.id, condition: 1})
      3. Count results for each type
      4. Return type_id with highest count
    -->
  </qa_pair>

  <!-- ========================================
       CATEGORY 3: RELATIONSHIP NAVIGATION (25%)
       ======================================== -->

  <qa_pair>
    <question>
      Get card [YOUR_CARD_ID_WITH_SUBTASKS] and examine its subtasks.
      How many subtasks are in state 3 (done)?

      Hint: The kaiten_get_card response includes detailed subtasks
      information with state for each child card.
    </question>
    <answer>[COUNT_OF_DONE_SUBTASKS]</answer>
    <!--
      To find answer:
      1. kaiten_get_card({card_id: X})
      2. Look for children_cards section in markdown response
      3. Count subtasks with "âœ…" icon (state 3 = done)
    -->
  </qa_pair>

  <qa_pair>
    <question>
      Find board [YOUR_BOARD_ID], list all its columns using
      kaiten_list_columns, then find how many active cards (condition=1)
      are in the column named "[COLUMN_NAME]". What is the count?

      If column doesn't exist or has no cards, answer "0".
    </question>
    <answer>[COUNT_OF_CARDS_IN_COLUMN]</answer>
    <!--
      To find answer:
      1. kaiten_list_columns({board_id: X})
      2. Find column by title, extract column_id
      3. kaiten_search_cards({board_id: X, column_id: column_id, condition: 1})
      4. Count results
    -->
  </qa_pair>

  <!-- ========================================
       CATEGORY 4: WORKFLOW SIMULATION (20%)
       ======================================== -->

  <qa_pair>
    <question>
      Simulate a board structure discovery workflow for board [YOUR_BOARD_ID]:
      1. Get board details
      2. List all columns
      3. List all lanes
      4. List all card types

      How many columns does this board have? Answer with just the number.
    </question>
    <answer>[NUMBER_OF_COLUMNS]</answer>
    <!--
      To find answer:
      1. kaiten_get_board({board_id: X})
      2. kaiten_list_columns({board_id: X})
      3. Count columns in response
    -->
  </qa_pair>

  <qa_pair>
    <question>
      Get card [YOUR_CARD_ID] and read all its comments using
      kaiten_get_card_comments. Who wrote the first comment? Answer with
      the author_name.

      If card has no comments, answer "NO_COMMENTS".
    </question>
    <answer>[FIRST_COMMENT_AUTHOR_NAME]</answer>
    <!--
      To find answer:
      1. kaiten_get_card_comments({card_id: X})
      2. Sort by created timestamp (ascending)
      3. Return author_name of first comment
    -->
  </qa_pair>

  <qa_pair>
    <question>
      In space [YOUR_SPACE_ID], find all boards using kaiten_list_boards.
      Which board (by board_id) has the title "[YOUR_BOARD_TITLE]"?

      If board doesn't exist, answer "NOT_FOUND".
    </question>
    <answer>[BOARD_ID]</answer>
    <!--
      To find answer:
      1. kaiten_list_boards({space_id: X})
      2. Find board with matching title
      3. Return board_id
    -->
  </qa_pair>

</evaluation>
